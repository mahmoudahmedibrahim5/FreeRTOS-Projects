
FreeRTOS_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004610  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004828  08004828  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e50  20000014  08004844  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e64  08004844  00022e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012769  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029de  00000000  00000000  000327ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e19  00000000  00000000  000371e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131fe  00000000  00000000  0004e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095375  00000000  00000000  000611ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  000f65c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004798 	.word	0x08004798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004798 	.word	0x08004798

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fa9f 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f861 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8e9 	bl	80006c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f6:	f000 f8bd 	bl	8000674 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str[] = "Hello\n";
 80004fa:	4a26      	ldr	r2, [pc, #152]	; (8000594 <main+0xb0>)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000502:	6018      	str	r0, [r3, #0]
 8000504:	3304      	adds	r3, #4
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	3302      	adds	r3, #2
 800050a:	0c0a      	lsrs	r2, r1, #16
 800050c:	701a      	strb	r2, [r3, #0]
  BaseType_t status;
  status = xTaskCreate(task1_handler, "Task1", 200, "Hello from Task1\n", 2, &task1_handle);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <main+0xb4>)
 800051a:	22c8      	movs	r2, #200	; 0xc8
 800051c:	491f      	ldr	r1, [pc, #124]	; (800059c <main+0xb8>)
 800051e:	4820      	ldr	r0, [pc, #128]	; (80005a0 <main+0xbc>)
 8000520:	f002 fb84 	bl	8002c2c <xTaskCreate>
 8000524:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d00a      	beq.n	8000542 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000530:	f383 8811 	msr	BASEPRI, r3
 8000534:	f3bf 8f6f 	isb	sy
 8000538:	f3bf 8f4f 	dsb	sy
 800053c:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800053e:	bf00      	nop
 8000540:	e7fe      	b.n	8000540 <main+0x5c>
  status = xTaskCreate(task2_handler, "Task2", 200, "Hello from Task2\n", 2, &task2_handle);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2302      	movs	r3, #2
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <main+0xc0>)
 800054e:	22c8      	movs	r2, #200	; 0xc8
 8000550:	4915      	ldr	r1, [pc, #84]	; (80005a8 <main+0xc4>)
 8000552:	4816      	ldr	r0, [pc, #88]	; (80005ac <main+0xc8>)
 8000554:	f002 fb6a 	bl	8002c2c <xTaskCreate>
 8000558:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00a      	beq.n	8000576 <main+0x92>
        __asm volatile
 8000560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000564:	f383 8811 	msr	BASEPRI, r3
 8000568:	f3bf 8f6f 	isb	sy
 800056c:	f3bf 8f4f 	dsb	sy
 8000570:	617b      	str	r3, [r7, #20]
    }
 8000572:	bf00      	nop
 8000574:	e7fe      	b.n	8000574 <main+0x90>

  vTaskStartScheduler();
 8000576:	f002 fcb5 	bl	8002ee4 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, str, 6, 1000);
 800057a:	1d39      	adds	r1, r7, #4
 800057c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000580:	2206      	movs	r2, #6
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0xcc>)
 8000584:	f001 fc75 	bl	8001e72 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058c:	f000 fa90 	bl	8000ab0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, str, 6, 1000);
 8000590:	e7f3      	b.n	800057a <main+0x96>
 8000592:	bf00      	nop
 8000594:	080047e8 	.word	0x080047e8
 8000598:	080047b0 	.word	0x080047b0
 800059c:	080047c4 	.word	0x080047c4
 80005a0:	080006fd 	.word	0x080006fd
 80005a4:	080047cc 	.word	0x080047cc
 80005a8:	080047e0 	.word	0x080047e0
 80005ac:	08000735 	.word	0x08000735
 80005b0:	20000030 	.word	0x20000030

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f8e0 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SystemClock_Config+0xb8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <SystemClock_Config+0xb8>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <SystemClock_Config+0xb8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <SystemClock_Config+0xbc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <SystemClock_Config+0xbc>)
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <SystemClock_Config+0xbc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fccb 	bl	8000fc4 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000634:	f000 f8ac 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f000 ff2e 	bl	80014b4 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800065e:	f000 f897 	bl	8000790 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_USART1_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 8000680:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 80006ac:	f001 fb94 	bl	8001dd8 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f86b 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000030 	.word	0x20000030
 80006c4:	40011000 	.word	0x40011000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x30>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x30>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_GPIO_Init+0x30>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* par)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)par, 17, 1000);
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	2211      	movs	r2, #17
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <task1_handler+0x30>)
 800070e:	f001 fbb0 	bl	8001e72 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f000 f9cb 	bl	8000ab0 <HAL_Delay>
		taskYIELD();
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <task1_handler+0x34>)
 800071c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	f3bf 8f6f 	isb	sy
		HAL_UART_Transmit(&huart1, (uint8_t *)par, 17, 1000);
 800072a:	e7eb      	b.n	8000704 <task1_handler+0x8>
 800072c:	20000030 	.word	0x20000030
 8000730:	e000ed04 	.word	0xe000ed04

08000734 <task2_handler>:
	}
}

static void task2_handler(void* par)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)par, 17, 1000);
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	2211      	movs	r2, #17
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <task2_handler+0x30>)
 8000746:	f001 fb94 	bl	8001e72 <HAL_UART_Transmit>
		HAL_Delay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074e:	f000 f9af 	bl	8000ab0 <HAL_Delay>
		taskYIELD();
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <task2_handler+0x34>)
 8000754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	f3bf 8f4f 	dsb	sy
 800075e:	f3bf 8f6f 	isb	sy
		HAL_UART_Transmit(&huart1, (uint8_t *)par, 17, 1000);
 8000762:	e7eb      	b.n	800073c <task2_handler+0x8>
 8000764:	20000030 	.word	0x20000030
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f000 f977 	bl	8000a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40000c00 	.word	0x40000c00

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_UART_MspInit+0x84>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d12c      	bne.n	8000868 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_UART_MspInit+0x88>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <HAL_UART_MspInit+0x88>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_UART_MspInit+0x88>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_UART_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_UART_MspInit+0x88>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_MspInit+0x88>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000846:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000858:	2307      	movs	r3, #7
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_UART_MspInit+0x8c>)
 8000864:	f000 fa2a 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40011000 	.word	0x40011000
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000

0800087c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b33      	ldr	r3, [pc, #204]	; (8000960 <HAL_InitTick+0xe4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a32      	ldr	r2, [pc, #200]	; (8000960 <HAL_InitTick+0xe4>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <HAL_InitTick+0xe4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffde 	bl	8001874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d103      	bne.n	80008ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008c2:	f000 ffaf 	bl	8001824 <HAL_RCC_GetPCLK1Freq>
 80008c6:	6378      	str	r0, [r7, #52]	; 0x34
 80008c8:	e004      	b.n	80008d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ca:	f000 ffab 	bl	8001824 <HAL_RCC_GetPCLK1Freq>
 80008ce:	4603      	mov	r3, r0
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <HAL_InitTick+0xe8>)
 80008d8:	fba2 2303 	umull	r2, r3, r2, r3
 80008dc:	0c9b      	lsrs	r3, r3, #18
 80008de:	3b01      	subs	r3, #1
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <HAL_InitTick+0xec>)
 80008e4:	4a21      	ldr	r2, [pc, #132]	; (800096c <HAL_InitTick+0xf0>)
 80008e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <HAL_InitTick+0xec>)
 80008ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ee:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80008f0:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <HAL_InitTick+0xec>)
 80008f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_InitTick+0xec>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_InitTick+0xec>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_InitTick+0xec>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000908:	4817      	ldr	r0, [pc, #92]	; (8000968 <HAL_InitTick+0xec>)
 800090a:	f000 ffe5 	bl	80018d8 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000918:	2b00      	cmp	r3, #0
 800091a:	d11b      	bne.n	8000954 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <HAL_InitTick+0xec>)
 800091e:	f001 f835 	bl	800198c <HAL_TIM_Base_Start_IT>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092c:	2b00      	cmp	r3, #0
 800092e:	d111      	bne.n	8000954 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000930:	2032      	movs	r0, #50	; 0x32
 8000932:	f000 f9b5 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d808      	bhi.n	800094e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f000 f991 	bl	8000c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_InitTick+0xf4>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	e002      	b.n	8000954 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000954:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000958:	4618      	mov	r0, r3
 800095a:	3738      	adds	r7, #56	; 0x38
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	431bde83 	.word	0x431bde83
 8000968:	20000074 	.word	0x20000074
 800096c:	40000c00 	.word	0x40000c00
 8000970:	20000004 	.word	0x20000004

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM5_IRQHandler+0x10>)
 80009a6:	f001 f853 	bl	8001a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000074 	.word	0x20000074

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd7 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f003 fe8d 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fd6b 	bl	80004e4 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a1c:	08004830 	.word	0x08004830
  ldr r2, =_sbss
 8000a20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a24:	20012e64 	.word	0x20012e64

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f8fc 	bl	8000c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f7ff ff0e 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fe9c 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200000bc 	.word	0x200000bc

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200000bc 	.word	0x200000bc

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff ffee 	bl	8000a98 <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Delay+0x44>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffde 	bl	8000a98 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff4c 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7a:	f7ff ff61 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f7ff ffb1 	bl	8000bec <NVIC_EncodePriority>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff80 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff54 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e159      	b.n	8000f8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f040 8148 	bne.w	8000f86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d005      	beq.n	8000d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d130      	bne.n	8000d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 0201 	and.w	r2, r3, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d017      	beq.n	8000dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d123      	bne.n	8000e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	69b9      	ldr	r1, [r7, #24]
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0203 	and.w	r2, r3, #3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80a2 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b57      	ldr	r3, [pc, #348]	; (8000fa4 <HAL_GPIO_Init+0x2e8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a56      	ldr	r2, [pc, #344]	; (8000fa4 <HAL_GPIO_Init+0x2e8>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <HAL_GPIO_Init+0x2e8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5e:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <HAL_GPIO_Init+0x2ec>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a49      	ldr	r2, [pc, #292]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x202>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_GPIO_Init+0x2f4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x1fe>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a47      	ldr	r2, [pc, #284]	; (8000fb4 <HAL_GPIO_Init+0x2f8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x1fa>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <HAL_GPIO_Init+0x2fc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x1f6>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a45      	ldr	r2, [pc, #276]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x1f2>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eae:	2307      	movs	r3, #7
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	f002 0203 	and.w	r2, r2, #3
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed0:	4935      	ldr	r1, [pc, #212]	; (8000fa8 <HAL_GPIO_Init+0x2ec>)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f2c:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	2b0f      	cmp	r3, #15
 8000f90:	f67f aea2 	bls.w	8000cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40013c00 	.word	0x40013c00

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e267      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d075      	beq.n	80010ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe2:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d00c      	beq.n	8001008 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fee:	4b85      	ldr	r3, [pc, #532]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d112      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffa:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001006:	d10b      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	4b7e      	ldr	r3, [pc, #504]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05b      	beq.n	80010cc <HAL_RCC_OscConfig+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d157      	bne.n	80010cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e242      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d106      	bne.n	8001038 <HAL_RCC_OscConfig+0x74>
 800102a:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a75      	ldr	r2, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01d      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x98>
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fd0c 	bl	8000a98 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fd08 	bl	8000a98 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e207      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0xc0>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fcf8 	bl	8000a98 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fcf4 	bl	8000a98 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1f3      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0xe8>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d063      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d11c      	bne.n	800112c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x152>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e1c7      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4937      	ldr	r1, [pc, #220]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	e03a      	b.n	80011a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_RCC_OscConfig+0x244>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113a:	f7ff fcad 	bl	8000a98 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fca9 	bl	8000a98 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e1a8      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4925      	ldr	r1, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_OscConfig+0x244>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fc8c 	bl	8000a98 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fc88 	bl	8000a98 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e187      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d036      	beq.n	800121c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_RCC_OscConfig+0x248>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fc6c 	bl	8000a98 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc68 	bl	8000a98 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e167      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80011d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x200>
 80011e2:	e01b      	b.n	800121c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_OscConfig+0x248>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fc55 	bl	8000a98 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	e00e      	b.n	8001210 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc51 	bl	8000a98 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d907      	bls.n	8001210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e150      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001204:	40023800 	.word	0x40023800
 8001208:	42470000 	.word	0x42470000
 800120c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ea      	bne.n	80011f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8097 	beq.w	8001358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b81      	ldr	r3, [pc, #516]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10f      	bne.n	800125a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b7d      	ldr	r3, [pc, #500]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a7c      	ldr	r2, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b77      	ldr	r3, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a73      	ldr	r2, [pc, #460]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001272:	f7ff fc11 	bl	8000a98 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fc0d 	bl	8000a98 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e10c      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x2ea>
 80012a0:	4b64      	ldr	r3, [pc, #400]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a63      	ldr	r2, [pc, #396]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	e01c      	b.n	80012e8 <HAL_RCC_OscConfig+0x324>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x30c>
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	4a5e      	ldr	r2, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6713      	str	r3, [r2, #112]	; 0x70
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0x324>
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d015      	beq.n	800131c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff fbd2 	bl	8000a98 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fbce 	bl	8000a98 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0cb      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ee      	beq.n	80012f8 <HAL_RCC_OscConfig+0x334>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fbbc 	bl	8000a98 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fbb8 	bl	8000a98 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0b5      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ee      	bne.n	8001324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a38      	ldr	r2, [pc, #224]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a1 	beq.w	80014a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d05c      	beq.n	8001428 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d141      	bne.n	80013fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_RCC_OscConfig+0x478>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb8c 	bl	8000a98 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fb88 	bl	8000a98 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e087      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	3b01      	subs	r3, #1
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	491b      	ldr	r1, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x478>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb61 	bl	8000a98 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fb5d 	bl	8000a98 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e05c      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x416>
 80013f8:	e054      	b.n	80014a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_RCC_OscConfig+0x478>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb4a 	bl	8000a98 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fb46 	bl	8000a98 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e045      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x444>
 8001426:	e03d      	b.n	80014a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e038      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000
 800143c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x4ec>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d028      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d121      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d11a      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001478:	4293      	cmp	r3, r2
 800147a:	d111      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	3b01      	subs	r3, #1
 800148a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0cc      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d90c      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b8      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800152a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	494d      	ldr	r1, [pc, #308]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d044      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d119      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e07f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d003      	beq.n	8001572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800156e:	2b03      	cmp	r3, #3
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e067      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 0203 	bic.w	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4934      	ldr	r1, [pc, #208]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fa78 	bl	8000a98 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ac:	f7ff fa74 	bl	8000a98 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e04f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 020c 	and.w	r2, r3, #12
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d1eb      	bne.n	80015ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d20c      	bcs.n	80015fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e032      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4916      	ldr	r1, [pc, #88]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800163a:	f000 f821 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 800163e:	4602      	mov	r2, r0
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	490a      	ldr	r1, [pc, #40]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f90e 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00
 8001670:	40023800 	.word	0x40023800
 8001674:	08004808 	.word	0x08004808
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001684:	b090      	sub	sp, #64	; 0x40
 8001686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
 800168c:	2300      	movs	r3, #0
 800168e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_GetSysClockFreq+0x180>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d00d      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x40>
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	f200 80a1 	bhi.w	80017ec <HAL_RCC_GetSysClockFreq+0x16c>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x34>
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x3a>
 80016b2:	e09b      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_GetSysClockFreq+0x184>)
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016b8:	e09b      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ba:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_GetSysClockFreq+0x188>)
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016be:	e098      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c0:	4b4f      	ldr	r3, [pc, #316]	; (8001800 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ca:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <HAL_RCC_GetSysClockFreq+0x180>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	2200      	movs	r2, #0
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	627a      	str	r2, [r7, #36]	; 0x24
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016e8:	2100      	movs	r1, #0
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ec:	fb03 f201 	mul.w	r2, r3, r1
 80016f0:	2300      	movs	r3, #0
 80016f2:	fb00 f303 	mul.w	r3, r0, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	4a43      	ldr	r2, [pc, #268]	; (8001808 <HAL_RCC_GetSysClockFreq+0x188>)
 80016fa:	fba0 1202 	umull	r1, r2, r0, r2
 80016fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001700:	460a      	mov	r2, r1
 8001702:	62ba      	str	r2, [r7, #40]	; 0x28
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	4413      	add	r3, r2
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170c:	2200      	movs	r2, #0
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	61fa      	str	r2, [r7, #28]
 8001712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001716:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800171a:	f7fe fd61 	bl	80001e0 <__aeabi_uldivmod>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4613      	mov	r3, r2
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001726:	e053      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_GetSysClockFreq+0x180>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	2200      	movs	r2, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	617a      	str	r2, [r7, #20]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800173a:	f04f 0b00 	mov.w	fp, #0
 800173e:	4652      	mov	r2, sl
 8001740:	465b      	mov	r3, fp
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	0159      	lsls	r1, r3, #5
 800174c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001750:	0150      	lsls	r0, r2, #5
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ebb2 080a 	subs.w	r8, r2, sl
 800175a:	eb63 090b 	sbc.w	r9, r3, fp
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800176a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800176e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001772:	ebb2 0408 	subs.w	r4, r2, r8
 8001776:	eb63 0509 	sbc.w	r5, r3, r9
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	00eb      	lsls	r3, r5, #3
 8001784:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	4614      	mov	r4, r2
 800178c:	461d      	mov	r5, r3
 800178e:	eb14 030a 	adds.w	r3, r4, sl
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	eb45 030b 	adc.w	r3, r5, fp
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017a6:	4629      	mov	r1, r5
 80017a8:	028b      	lsls	r3, r1, #10
 80017aa:	4621      	mov	r1, r4
 80017ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b0:	4621      	mov	r1, r4
 80017b2:	028a      	lsls	r2, r1, #10
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	2200      	movs	r2, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	60fa      	str	r2, [r7, #12]
 80017c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c4:	f7fe fd0c 	bl	80001e0 <__aeabi_uldivmod>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4613      	mov	r3, r2
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	3301      	adds	r3, #1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ea:	e002      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3740      	adds	r7, #64	; 0x40
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	00f42400 	.word	0x00f42400
 8001808:	017d7840 	.word	0x017d7840

0800180c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_RCC_GetHCLKFreq+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000

08001824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001828:	f7ff fff0 	bl	800180c <HAL_RCC_GetHCLKFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	0a9b      	lsrs	r3, r3, #10
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	08004818 	.word	0x08004818

0800184c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001850:	f7ff ffdc 	bl	800180c <HAL_RCC_GetHCLKFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0b5b      	lsrs	r3, r3, #13
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	4903      	ldr	r1, [pc, #12]	; (8001870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	08004818 	.word	0x08004818

08001874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	220f      	movs	r2, #15
 8001882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_RCC_GetClockConfig+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0207 	and.w	r2, r3, #7
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	601a      	str	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e041      	b.n	800196e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f839 	bl	8001976 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f000 f9ca 	bl	8001cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d001      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e044      	b.n	8001a2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_TIM_Base_Start_IT+0xb0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d018      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x6c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ce:	d013      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x6c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_TIM_Base_Start_IT+0xb4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00e      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x6c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_TIM_Base_Start_IT+0xb8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d009      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x6c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_TIM_Base_Start_IT+0xbc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d004      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x6c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <HAL_TIM_Base_Start_IT+0xc0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d010      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1a:	e007      	b.n	8001a2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40000c00 	.word	0x40000c00
 8001a4c:	40014000 	.word	0x40014000

08001a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d122      	bne.n	8001aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d11b      	bne.n	8001aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0202 	mvn.w	r2, #2
 8001a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8ee 	bl	8001c74 <HAL_TIM_IC_CaptureCallback>
 8001a98:	e005      	b.n	8001aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8e0 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8f1 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d122      	bne.n	8001b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d11b      	bne.n	8001b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0204 	mvn.w	r2, #4
 8001ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8c4 	bl	8001c74 <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8b6 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8c7 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d122      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d11b      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0208 	mvn.w	r2, #8
 8001b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f89a 	bl	8001c74 <HAL_TIM_IC_CaptureCallback>
 8001b40:	e005      	b.n	8001b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f88c 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f89d 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d122      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d11b      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0210 	mvn.w	r2, #16
 8001b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f870 	bl	8001c74 <HAL_TIM_IC_CaptureCallback>
 8001b94:	e005      	b.n	8001ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f862 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f873 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0201 	mvn.w	r2, #1
 8001bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fdcc 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	2b80      	cmp	r3, #128	; 0x80
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8e2 	bl	8001dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b40      	cmp	r3, #64	; 0x40
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f838 	bl	8001c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0220 	mvn.w	r2, #32
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8ac 	bl	8001db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00f      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cce:	d00b      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <TIM_Base_SetConfig+0xe8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <TIM_Base_SetConfig+0xec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <TIM_Base_SetConfig+0xf0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d108      	bne.n	8001cfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01b      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d017      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <TIM_Base_SetConfig+0xe8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <TIM_Base_SetConfig+0xec>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00f      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <TIM_Base_SetConfig+0xf0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00b      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <TIM_Base_SetConfig+0xf4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <TIM_Base_SetConfig+0xf8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d003      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <TIM_Base_SetConfig+0xfc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d103      	bne.n	8001d80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40000c00 	.word	0x40000c00
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800

08001db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e03f      	b.n	8001e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fcf4 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f929 	bl	8002074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b08a      	sub	sp, #40	; 0x28
 8001e76:	af02      	add	r7, sp, #8
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d17c      	bne.n	8001f8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_UART_Transmit+0x2c>
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e075      	b.n	8001f8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_UART_Transmit+0x3e>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e06e      	b.n	8001f8e <HAL_UART_Transmit+0x11c>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2221      	movs	r2, #33	; 0x21
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ec6:	f7fe fde7 	bl	8000a98 <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	88fa      	ldrh	r2, [r7, #6]
 8001ed6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee0:	d108      	bne.n	8001ef4 <HAL_UART_Transmit+0x82>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d104      	bne.n	8001ef4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	e003      	b.n	8001efc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f04:	e02a      	b.n	8001f5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f840 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e036      	b.n	8001f8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10b      	bne.n	8001f3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	e007      	b.n	8001f4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1cf      	bne.n	8001f06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f810 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e006      	b.n	8001f8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b090      	sub	sp, #64	; 0x40
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa6:	e050      	b.n	800204a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d04c      	beq.n	800204a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fb6:	f7fe fd6f 	bl	8000a98 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d241      	bcs.n	800204a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe6:	637a      	str	r2, [r7, #52]	; 0x34
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fee:	e841 2300 	strex	r3, r2, [r1]
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e5      	bne.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3314      	adds	r3, #20
 8002000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	e853 3f00 	ldrex	r3, [r3]
 8002008:	613b      	str	r3, [r7, #16]
   return(result);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3314      	adds	r3, #20
 8002018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201a:	623a      	str	r2, [r7, #32]
 800201c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201e:	69f9      	ldr	r1, [r7, #28]
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	e841 2300 	strex	r3, r2, [r1]
 8002026:	61bb      	str	r3, [r7, #24]
   return(result);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e5      	bne.n	8001ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e00f      	b.n	800206a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	429a      	cmp	r2, r3
 8002066:	d09f      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3740      	adds	r7, #64	; 0x40
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002078:	b0c0      	sub	sp, #256	; 0x100
 800207a:	af00      	add	r7, sp, #0
 800207c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	ea40 0301 	orr.w	r3, r0, r1
 800209c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020cc:	f021 010c 	bic.w	r1, r1, #12
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020da:	430b      	orrs	r3, r1
 80020dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ee:	6999      	ldr	r1, [r3, #24]
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	ea40 0301 	orr.w	r3, r0, r1
 80020fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4b8f      	ldr	r3, [pc, #572]	; (8002340 <UART_SetConfig+0x2cc>)
 8002104:	429a      	cmp	r2, r3
 8002106:	d005      	beq.n	8002114 <UART_SetConfig+0xa0>
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b8d      	ldr	r3, [pc, #564]	; (8002344 <UART_SetConfig+0x2d0>)
 8002110:	429a      	cmp	r2, r3
 8002112:	d104      	bne.n	800211e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002114:	f7ff fb9a 	bl	800184c <HAL_RCC_GetPCLK2Freq>
 8002118:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800211c:	e003      	b.n	8002126 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800211e:	f7ff fb81 	bl	8001824 <HAL_RCC_GetPCLK1Freq>
 8002122:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002130:	f040 810c 	bne.w	800234c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002138:	2200      	movs	r2, #0
 800213a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800213e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002146:	4622      	mov	r2, r4
 8002148:	462b      	mov	r3, r5
 800214a:	1891      	adds	r1, r2, r2
 800214c:	65b9      	str	r1, [r7, #88]	; 0x58
 800214e:	415b      	adcs	r3, r3
 8002150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002152:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002156:	4621      	mov	r1, r4
 8002158:	eb12 0801 	adds.w	r8, r2, r1
 800215c:	4629      	mov	r1, r5
 800215e:	eb43 0901 	adc.w	r9, r3, r1
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800216e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002176:	4690      	mov	r8, r2
 8002178:	4699      	mov	r9, r3
 800217a:	4623      	mov	r3, r4
 800217c:	eb18 0303 	adds.w	r3, r8, r3
 8002180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002184:	462b      	mov	r3, r5
 8002186:	eb49 0303 	adc.w	r3, r9, r3
 800218a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800218e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800219a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800219e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021a2:	460b      	mov	r3, r1
 80021a4:	18db      	adds	r3, r3, r3
 80021a6:	653b      	str	r3, [r7, #80]	; 0x50
 80021a8:	4613      	mov	r3, r2
 80021aa:	eb42 0303 	adc.w	r3, r2, r3
 80021ae:	657b      	str	r3, [r7, #84]	; 0x54
 80021b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021b8:	f7fe f812 	bl	80001e0 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4b61      	ldr	r3, [pc, #388]	; (8002348 <UART_SetConfig+0x2d4>)
 80021c2:	fba3 2302 	umull	r2, r3, r3, r2
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	011c      	lsls	r4, r3, #4
 80021ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021dc:	4642      	mov	r2, r8
 80021de:	464b      	mov	r3, r9
 80021e0:	1891      	adds	r1, r2, r2
 80021e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80021e4:	415b      	adcs	r3, r3
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021ec:	4641      	mov	r1, r8
 80021ee:	eb12 0a01 	adds.w	sl, r2, r1
 80021f2:	4649      	mov	r1, r9
 80021f4:	eb43 0b01 	adc.w	fp, r3, r1
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002204:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800220c:	4692      	mov	sl, r2
 800220e:	469b      	mov	fp, r3
 8002210:	4643      	mov	r3, r8
 8002212:	eb1a 0303 	adds.w	r3, sl, r3
 8002216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800221a:	464b      	mov	r3, r9
 800221c:	eb4b 0303 	adc.w	r3, fp, r3
 8002220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002230:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002234:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002238:	460b      	mov	r3, r1
 800223a:	18db      	adds	r3, r3, r3
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
 800223e:	4613      	mov	r3, r2
 8002240:	eb42 0303 	adc.w	r3, r2, r3
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
 8002246:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800224a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800224e:	f7fd ffc7 	bl	80001e0 <__aeabi_uldivmod>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4611      	mov	r1, r2
 8002258:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <UART_SetConfig+0x2d4>)
 800225a:	fba3 2301 	umull	r2, r3, r3, r1
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2264      	movs	r2, #100	; 0x64
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	1acb      	subs	r3, r1, r3
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <UART_SetConfig+0x2d4>)
 8002270:	fba3 2302 	umull	r2, r3, r3, r2
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800227c:	441c      	add	r4, r3
 800227e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002282:	2200      	movs	r2, #0
 8002284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002288:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800228c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002290:	4642      	mov	r2, r8
 8002292:	464b      	mov	r3, r9
 8002294:	1891      	adds	r1, r2, r2
 8002296:	63b9      	str	r1, [r7, #56]	; 0x38
 8002298:	415b      	adcs	r3, r3
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022a0:	4641      	mov	r1, r8
 80022a2:	1851      	adds	r1, r2, r1
 80022a4:	6339      	str	r1, [r7, #48]	; 0x30
 80022a6:	4649      	mov	r1, r9
 80022a8:	414b      	adcs	r3, r1
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022b8:	4659      	mov	r1, fp
 80022ba:	00cb      	lsls	r3, r1, #3
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022c2:	4651      	mov	r1, sl
 80022c4:	00ca      	lsls	r2, r1, #3
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	4642      	mov	r2, r8
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022d4:	464b      	mov	r3, r9
 80022d6:	460a      	mov	r2, r1
 80022d8:	eb42 0303 	adc.w	r3, r2, r3
 80022dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022f4:	460b      	mov	r3, r1
 80022f6:	18db      	adds	r3, r3, r3
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fa:	4613      	mov	r3, r2
 80022fc:	eb42 0303 	adc.w	r3, r2, r3
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002306:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800230a:	f7fd ff69 	bl	80001e0 <__aeabi_uldivmod>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <UART_SetConfig+0x2d4>)
 8002314:	fba3 1302 	umull	r1, r3, r3, r2
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	2164      	movs	r1, #100	; 0x64
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	3332      	adds	r3, #50	; 0x32
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <UART_SetConfig+0x2d4>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	f003 0207 	and.w	r2, r3, #7
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4422      	add	r2, r4
 800233a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800233c:	e105      	b.n	800254a <UART_SetConfig+0x4d6>
 800233e:	bf00      	nop
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800234c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002350:	2200      	movs	r2, #0
 8002352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002356:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800235a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800235e:	4642      	mov	r2, r8
 8002360:	464b      	mov	r3, r9
 8002362:	1891      	adds	r1, r2, r2
 8002364:	6239      	str	r1, [r7, #32]
 8002366:	415b      	adcs	r3, r3
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800236e:	4641      	mov	r1, r8
 8002370:	1854      	adds	r4, r2, r1
 8002372:	4649      	mov	r1, r9
 8002374:	eb43 0501 	adc.w	r5, r3, r1
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	00eb      	lsls	r3, r5, #3
 8002382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002386:	00e2      	lsls	r2, r4, #3
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	4643      	mov	r3, r8
 800238e:	18e3      	adds	r3, r4, r3
 8002390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002394:	464b      	mov	r3, r9
 8002396:	eb45 0303 	adc.w	r3, r5, r3
 800239a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023ba:	4629      	mov	r1, r5
 80023bc:	008b      	lsls	r3, r1, #2
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023c4:	4621      	mov	r1, r4
 80023c6:	008a      	lsls	r2, r1, #2
 80023c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023cc:	f7fd ff08 	bl	80001e0 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <UART_SetConfig+0x4e4>)
 80023d6:	fba3 2302 	umull	r2, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	011c      	lsls	r4, r3, #4
 80023de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023f0:	4642      	mov	r2, r8
 80023f2:	464b      	mov	r3, r9
 80023f4:	1891      	adds	r1, r2, r2
 80023f6:	61b9      	str	r1, [r7, #24]
 80023f8:	415b      	adcs	r3, r3
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002400:	4641      	mov	r1, r8
 8002402:	1851      	adds	r1, r2, r1
 8002404:	6139      	str	r1, [r7, #16]
 8002406:	4649      	mov	r1, r9
 8002408:	414b      	adcs	r3, r1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002418:	4659      	mov	r1, fp
 800241a:	00cb      	lsls	r3, r1, #3
 800241c:	4651      	mov	r1, sl
 800241e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002422:	4651      	mov	r1, sl
 8002424:	00ca      	lsls	r2, r1, #3
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	4603      	mov	r3, r0
 800242c:	4642      	mov	r2, r8
 800242e:	189b      	adds	r3, r3, r2
 8002430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002434:	464b      	mov	r3, r9
 8002436:	460a      	mov	r2, r1
 8002438:	eb42 0303 	adc.w	r3, r2, r3
 800243c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	67bb      	str	r3, [r7, #120]	; 0x78
 800244a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002458:	4649      	mov	r1, r9
 800245a:	008b      	lsls	r3, r1, #2
 800245c:	4641      	mov	r1, r8
 800245e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002462:	4641      	mov	r1, r8
 8002464:	008a      	lsls	r2, r1, #2
 8002466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800246a:	f7fd feb9 	bl	80001e0 <__aeabi_uldivmod>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <UART_SetConfig+0x4e4>)
 8002474:	fba3 1302 	umull	r1, r3, r3, r2
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	2164      	movs	r1, #100	; 0x64
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	3332      	adds	r3, #50	; 0x32
 8002486:	4a34      	ldr	r2, [pc, #208]	; (8002558 <UART_SetConfig+0x4e4>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002492:	441c      	add	r4, r3
 8002494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002498:	2200      	movs	r2, #0
 800249a:	673b      	str	r3, [r7, #112]	; 0x70
 800249c:	677a      	str	r2, [r7, #116]	; 0x74
 800249e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024a2:	4642      	mov	r2, r8
 80024a4:	464b      	mov	r3, r9
 80024a6:	1891      	adds	r1, r2, r2
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	415b      	adcs	r3, r3
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b2:	4641      	mov	r1, r8
 80024b4:	1851      	adds	r1, r2, r1
 80024b6:	6039      	str	r1, [r7, #0]
 80024b8:	4649      	mov	r1, r9
 80024ba:	414b      	adcs	r3, r1
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024ca:	4659      	mov	r1, fp
 80024cc:	00cb      	lsls	r3, r1, #3
 80024ce:	4651      	mov	r1, sl
 80024d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d4:	4651      	mov	r1, sl
 80024d6:	00ca      	lsls	r2, r1, #3
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	4603      	mov	r3, r0
 80024de:	4642      	mov	r2, r8
 80024e0:	189b      	adds	r3, r3, r2
 80024e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80024e4:	464b      	mov	r3, r9
 80024e6:	460a      	mov	r2, r1
 80024e8:	eb42 0303 	adc.w	r3, r2, r3
 80024ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	663b      	str	r3, [r7, #96]	; 0x60
 80024f8:	667a      	str	r2, [r7, #100]	; 0x64
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002506:	4649      	mov	r1, r9
 8002508:	008b      	lsls	r3, r1, #2
 800250a:	4641      	mov	r1, r8
 800250c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002510:	4641      	mov	r1, r8
 8002512:	008a      	lsls	r2, r1, #2
 8002514:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002518:	f7fd fe62 	bl	80001e0 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <UART_SetConfig+0x4e4>)
 8002522:	fba3 1302 	umull	r1, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2164      	movs	r1, #100	; 0x64
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	3332      	adds	r3, #50	; 0x32
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <UART_SetConfig+0x4e4>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4422      	add	r2, r4
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002550:	46bd      	mov	sp, r7
 8002552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002556:	bf00      	nop
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f103 0208 	add.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f103 0208 	add.w	r2, r3, #8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f103 0208 	add.w	r2, r3, #8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d103      	bne.n	80025d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e00c      	b.n	80025f0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3308      	adds	r3, #8
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e002      	b.n	80025e4 <vListInsert+0x2e>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d2f6      	bcs.n	80025de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6852      	ldr	r2, [r2, #4]
 8002648:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d103      	bne.n	800265c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002686:	2301      	movs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <xQueueGenericReset+0x2e>
        __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	60fb      	str	r3, [r7, #12]
    }
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d052      	beq.n	8002756 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d04e      	beq.n	8002756 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	2100      	movs	r1, #0
 80026c2:	fba3 2302 	umull	r2, r3, r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d000      	beq.n	80026cc <xQueueGenericReset+0x50>
 80026ca:	2101      	movs	r1, #1
 80026cc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d141      	bne.n	8002756 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80026d2:	f001 fd79 	bl	80041c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	6939      	ldr	r1, [r7, #16]
 80026e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	441a      	add	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2200      	movs	r2, #0
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	3b01      	subs	r3, #1
 8002704:	6939      	ldr	r1, [r7, #16]
 8002706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	441a      	add	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00f      	beq.n	8002750 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	3310      	adds	r3, #16
 8002734:	4618      	mov	r0, r3
 8002736:	f000 feed 	bl	8003514 <xTaskRemoveFromEventList>
 800273a:	e009      	b.n	8002750 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	3310      	adds	r3, #16
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff0b 	bl	800255c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	3324      	adds	r3, #36	; 0x24
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff06 	bl	800255c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002750:	f001 fd6a 	bl	8004228 <vPortExitCritical>
 8002754:	e001      	b.n	800275a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <xQueueGenericReset+0xfa>
        __asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	60bb      	str	r3, [r7, #8]
    }
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002776:	697b      	ldr	r3, [r7, #20]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	4613      	mov	r3, r2
 800278c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02e      	beq.n	80027f6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002798:	2100      	movs	r1, #0
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	fba3 2302 	umull	r2, r3, r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d000      	beq.n	80027a8 <xQueueGenericCreate+0x28>
 80027a6:	2101      	movs	r1, #1
 80027a8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d123      	bne.n	80027f6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80027b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80027ba:	d81c      	bhi.n	80027f6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3350      	adds	r3, #80	; 0x50
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 fdde 	bl	800438c <pvPortMalloc>
 80027d0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01c      	beq.n	8002812 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3350      	adds	r3, #80	; 0x50
 80027e0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027e2:	79fa      	ldrb	r2, [r7, #7]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f814 	bl	800281c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80027f4:	e00d      	b.n	8002812 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <xQueueGenericCreate+0x92>
        __asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	613b      	str	r3, [r7, #16]
    }
 800280e:	bf00      	nop
 8002810:	e7fe      	b.n	8002810 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002812:	69fb      	ldr	r3, [r7, #28]
    }
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e002      	b.n	800283e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800284a:	2101      	movs	r1, #1
 800284c:	69b8      	ldr	r0, [r7, #24]
 800284e:	f7ff ff15 	bl	800267c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <xQueueReceive+0x30>
        __asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	623b      	str	r3, [r7, #32]
    }
 8002890:	bf00      	nop
 8002892:	e7fe      	b.n	8002892 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <xQueueReceive+0x3e>
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <xQueueReceive+0x42>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <xQueueReceive+0x44>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <xQueueReceive+0x5e>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	61fb      	str	r3, [r7, #28]
    }
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c2:	f001 f831 	bl	8003928 <xTaskGetSchedulerState>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <xQueueReceive+0x6e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <xQueueReceive+0x72>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <xQueueReceive+0x74>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueReceive+0x8e>
        __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	61bb      	str	r3, [r7, #24]
    }
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028f2:	f001 fc69 	bl	80041c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d014      	beq.n	800292c <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002906:	f000 f881 	bl	8002a0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	3310      	adds	r3, #16
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fdf8 	bl	8003514 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002924:	f001 fc80 	bl	8004228 <vPortExitCritical>
                return pdPASS;
 8002928:	2301      	movs	r3, #1
 800292a:	e069      	b.n	8002a00 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002932:	f001 fc79 	bl	8004228 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002936:	2300      	movs	r3, #0
 8002938:	e062      	b.n	8002a00 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f000 febb 	bl	80036c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800294a:	2301      	movs	r3, #1
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800294e:	f001 fc6b 	bl	8004228 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002952:	f000 fb19 	bl	8002f88 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002956:	f001 fc37 	bl	80041c8 <vPortEnterCritical>
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	b25b      	sxtb	r3, r3
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d103      	bne.n	8002970 <xQueueReceive+0x10c>
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <xQueueReceive+0x122>
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002986:	f001 fc4f 	bl	8004228 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800298a:	1d3a      	adds	r2, r7, #4
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f000 feaa 	bl	80036ec <xTaskCheckForTimeOut>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d123      	bne.n	80029e6 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800299e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a0:	f000 f8ac 	bl	8002afc <prvIsQueueEmpty>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d017      	beq.n	80029da <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	3324      	adds	r3, #36	; 0x24
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fd44 	bl	8003440 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 f84d 	bl	8002a58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029be:	f000 faf1 	bl	8002fa4 <xTaskResumeAll>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d194      	bne.n	80028f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <xQueueReceive+0x1a4>)
 80029ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	e78b      	b.n	80028f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029dc:	f000 f83c 	bl	8002a58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029e0:	f000 fae0 	bl	8002fa4 <xTaskResumeAll>
 80029e4:	e785      	b.n	80028f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e8:	f000 f836 	bl	8002a58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029ec:	f000 fada 	bl	8002fa4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f2:	f000 f883 	bl	8002afc <prvIsQueueEmpty>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f43f af7a 	beq.w	80028f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80029fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d018      	beq.n	8002a50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d303      	bcc.n	8002a40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6838      	ldr	r0, [r7, #0]
 8002a4c:	f001 fe8e 	bl	800476c <memcpy>
    }
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a60:	f001 fbb2 	bl	80041c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6c:	e011      	b.n	8002a92 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3324      	adds	r3, #36	; 0x24
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd4a 	bl	8003514 <xTaskRemoveFromEventList>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a86:	f000 fe97 	bl	80037b8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	dce9      	bgt.n	8002a6e <prvUnlockQueue+0x16>
 8002a9a:	e000      	b.n	8002a9e <prvUnlockQueue+0x46>
                    break;
 8002a9c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002aa6:	f001 fbbf 	bl	8004228 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002aaa:	f001 fb8d 	bl	80041c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ab4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab6:	e011      	b.n	8002adc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fd25 	bl	8003514 <xTaskRemoveFromEventList>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ad0:	f000 fe72 	bl	80037b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dce9      	bgt.n	8002ab8 <prvUnlockQueue+0x60>
 8002ae4:	e000      	b.n	8002ae8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ae6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	22ff      	movs	r2, #255	; 0xff
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002af0:	f001 fb9a 	bl	8004228 <vPortExitCritical>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b04:	f001 fb60 	bl	80041c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e001      	b.n	8002b1a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b1a:	f001 fb85 	bl	8004228 <vPortExitCritical>

    return xReturn;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60fb      	str	r3, [r7, #12]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d024      	beq.n	8002ba2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	e01e      	b.n	8002b9c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b5e:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <vQueueAddToRegistry+0x98>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d105      	bne.n	8002b7a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <vQueueAddToRegistry+0x98>)
 8002b74:	4413      	add	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
                    break;
 8002b78:	e013      	b.n	8002ba2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <vQueueAddToRegistry+0x6e>
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <vQueueAddToRegistry+0x98>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <vQueueAddToRegistry+0x98>)
 8002b92:	4413      	add	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b07      	cmp	r3, #7
 8002ba0:	d9dd      	bls.n	8002b5e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	200000c0 	.word	0x200000c0

08002bc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bd4:	f001 faf8 	bl	80041c8 <vPortEnterCritical>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d103      	bne.n	8002bee <vQueueWaitForMessageRestricted+0x2a>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d103      	bne.n	8002c04 <vQueueWaitForMessageRestricted+0x40>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c04:	f001 fb10 	bl	8004228 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3324      	adds	r3, #36	; 0x24
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fc35 	bl	8003488 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff1a 	bl	8002a58 <prvUnlockQueue>
    }
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af04      	add	r7, sp, #16
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fba3 	bl	800438c <pvPortMalloc>
 8002c46:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c4e:	2058      	movs	r0, #88	; 0x58
 8002c50:	f001 fb9c 	bl	800438c <pvPortMalloc>
 8002c54:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c5c:	2258      	movs	r2, #88	; 0x58
 8002c5e:	2100      	movs	r1, #0
 8002c60:	69f8      	ldr	r0, [r7, #28]
 8002c62:	f001 fd91 	bl	8004788 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6c:	e005      	b.n	8002c7a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f001 fc46 	bl	8004500 <vPortFree>
 8002c74:	e001      	b.n	8002c7a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9303      	str	r3, [sp, #12]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f80e 	bl	8002cb8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c9c:	69f8      	ldr	r0, [r7, #28]
 8002c9e:	f000 f899 	bl	8002dd4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e002      	b.n	8002cae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cae:	69bb      	ldr	r3, [r7, #24]
    }
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	461a      	mov	r2, r3
 8002cd0:	21a5      	movs	r1, #165	; 0xa5
 8002cd2:	f001 fd59 	bl	8004788 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f023 0307 	bic.w	r3, r3, #7
 8002cee:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	617b      	str	r3, [r7, #20]
    }
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01e      	beq.n	8002d54 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e012      	b.n	8002d42 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	7819      	ldrb	r1, [r3, #0]
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	3334      	adds	r3, #52	; 0x34
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d9e9      	bls.n	8002d1c <prvInitialiseNewTask+0x64>
 8002d48:	e000      	b.n	8002d4c <prvInitialiseNewTask+0x94>
            {
                break;
 8002d4a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d90a      	bls.n	8002d70 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	613b      	str	r3, [r7, #16]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d901      	bls.n	8002d7a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d76:	2304      	movs	r3, #4
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d84:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc06 	bl	800259c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	3318      	adds	r3, #24
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fc01 	bl	800259c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	f1c3 0205 	rsb	r2, r3, #5
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	69b8      	ldr	r0, [r7, #24]
 8002db6:	f001 f8d9 	bl	8003f6c <pxPortInitialiseStack>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002dcc:	bf00      	nop
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ddc:	f001 f9f4 	bl	80041c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <prvAddNewTaskToReadyList+0xf8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	4a39      	ldr	r2, [pc, #228]	; (8002ecc <prvAddNewTaskToReadyList+0xf8>)
 8002de8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <prvAddNewTaskToReadyList+0xfc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002df2:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <prvAddNewTaskToReadyList+0xfc>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <prvAddNewTaskToReadyList+0xf8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d110      	bne.n	8002e22 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e00:	f000 fcf8 	bl	80037f4 <prvInitialiseTaskLists>
 8002e04:	e00d      	b.n	8002e22 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e06:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <prvAddNewTaskToReadyList+0x100>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e0e:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <prvAddNewTaskToReadyList+0xfc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d802      	bhi.n	8002e22 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <prvAddNewTaskToReadyList+0xfc>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <prvAddNewTaskToReadyList+0x104>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <prvAddNewTaskToReadyList+0x104>)
 8002e2a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <prvAddNewTaskToReadyList+0x104>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	2201      	movs	r2, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <prvAddNewTaskToReadyList+0x108>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	4a26      	ldr	r2, [pc, #152]	; (8002edc <prvAddNewTaskToReadyList+0x108>)
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4a:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <prvAddNewTaskToReadyList+0x10c>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3304      	adds	r3, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	3204      	adds	r2, #4
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	1d1a      	adds	r2, r3, #4
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <prvAddNewTaskToReadyList+0x10c>)
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	615a      	str	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	4912      	ldr	r1, [pc, #72]	; (8002ee0 <prvAddNewTaskToReadyList+0x10c>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	480e      	ldr	r0, [pc, #56]	; (8002ee0 <prvAddNewTaskToReadyList+0x10c>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4403      	add	r3, r0
 8002eb0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002eb2:	f001 f9b9 	bl	8004228 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <prvAddNewTaskToReadyList+0x100>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <prvAddNewTaskToReadyList+0xfc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200001d8 	.word	0x200001d8
 8002ed0:	20000100 	.word	0x20000100
 8002ed4:	200001e4 	.word	0x200001e4
 8002ed8:	200001f4 	.word	0x200001f4
 8002edc:	200001e0 	.word	0x200001e0
 8002ee0:	20000104 	.word	0x20000104

08002ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <vTaskStartScheduler+0x88>)
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2282      	movs	r2, #130	; 0x82
 8002ef6:	491e      	ldr	r1, [pc, #120]	; (8002f70 <vTaskStartScheduler+0x8c>)
 8002ef8:	481e      	ldr	r0, [pc, #120]	; (8002f74 <vTaskStartScheduler+0x90>)
 8002efa:	f7ff fe97 	bl	8002c2c <xTaskCreate>
 8002efe:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002f06:	f000 fdad 	bl	8003a64 <xTimerCreateTimerTask>
 8002f0a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d116      	bne.n	8002f40 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	60bb      	str	r3, [r7, #8]
    }
 8002f24:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <vTaskStartScheduler+0x94>)
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <vTaskStartScheduler+0x98>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <vTaskStartScheduler+0x9c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002f3a:	f001 f8a3 	bl	8004084 <xPortStartScheduler>
 8002f3e:	e00e      	b.n	8002f5e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d10a      	bne.n	8002f5e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	607b      	str	r3, [r7, #4]
    }
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <vTaskStartScheduler+0xa0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200001fc 	.word	0x200001fc
 8002f70:	080047f0 	.word	0x080047f0
 8002f74:	080037d1 	.word	0x080037d1
 8002f78:	200001f8 	.word	0x200001f8
 8002f7c:	200001e4 	.word	0x200001e4
 8002f80:	200001dc 	.word	0x200001dc
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <vTaskSuspendAll+0x18>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	4a03      	ldr	r2, [pc, #12]	; (8002fa0 <vTaskSuspendAll+0x18>)
 8002f94:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	20000200 	.word	0x20000200

08002fa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fb2:	4b6b      	ldr	r3, [pc, #428]	; (8003160 <xTaskResumeAll+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	607b      	str	r3, [r7, #4]
    }
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fd0:	f001 f8fa 	bl	80041c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fd4:	4b62      	ldr	r3, [pc, #392]	; (8003160 <xTaskResumeAll+0x1bc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	4a61      	ldr	r2, [pc, #388]	; (8003160 <xTaskResumeAll+0x1bc>)
 8002fdc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fde:	4b60      	ldr	r3, [pc, #384]	; (8003160 <xTaskResumeAll+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 80b4 	bne.w	8003150 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <xTaskResumeAll+0x1c0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80af 	beq.w	8003150 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff2:	e08a      	b.n	800310a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff4:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <xTaskResumeAll+0x1c4>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	6a12      	ldr	r2, [r2, #32]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	69d2      	ldr	r2, [r2, #28]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3318      	adds	r3, #24
 800301e:	429a      	cmp	r2, r3
 8003020:	d103      	bne.n	800302a <xTaskResumeAll+0x86>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2200      	movs	r2, #0
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	68d2      	ldr	r2, [r2, #12]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3304      	adds	r3, #4
 800305c:	429a      	cmp	r2, r3
 800305e:	d103      	bne.n	8003068 <xTaskResumeAll+0xc4>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <xTaskResumeAll+0x1c8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	4a39      	ldr	r2, [pc, #228]	; (800316c <xTaskResumeAll+0x1c8>)
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	4938      	ldr	r1, [pc, #224]	; (8003170 <xTaskResumeAll+0x1cc>)
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3304      	adds	r3, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	3204      	adds	r2, #4
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	1d1a      	adds	r2, r3, #4
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4a28      	ldr	r2, [pc, #160]	; (8003170 <xTaskResumeAll+0x1cc>)
 80030ce:	441a      	add	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4925      	ldr	r1, [pc, #148]	; (8003170 <xTaskResumeAll+0x1cc>)
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	4821      	ldr	r0, [pc, #132]	; (8003170 <xTaskResumeAll+0x1cc>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4403      	add	r3, r0
 80030f4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <xTaskResumeAll+0x1d0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <xTaskResumeAll+0x1d4>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <xTaskResumeAll+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f47f af70 	bne.w	8002ff4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800311a:	f000 fbe9 	bl	80038f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <xTaskResumeAll+0x1d8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800312a:	f000 f839 	bl	80031a0 <xTaskIncrementTick>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <xTaskResumeAll+0x1d4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	3b01      	subs	r3, #1
 800313e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f1      	bne.n	800312a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <xTaskResumeAll+0x1d8>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <xTaskResumeAll+0x1d4>)
 800314e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003150:	f001 f86a 	bl	8004228 <vPortExitCritical>

    return xAlreadyYielded;
 8003154:	697b      	ldr	r3, [r7, #20]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000200 	.word	0x20000200
 8003164:	200001d8 	.word	0x200001d8
 8003168:	20000198 	.word	0x20000198
 800316c:	200001e0 	.word	0x200001e0
 8003170:	20000104 	.word	0x20000104
 8003174:	20000100 	.word	0x20000100
 8003178:	200001ec 	.word	0x200001ec
 800317c:	200001e8 	.word	0x200001e8

08003180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <xTaskGetTickCount+0x1c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	200001dc 	.word	0x200001dc

080031a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031aa:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <xTaskIncrementTick+0x1c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 80cd 	bne.w	800334e <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031b4:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <xTaskIncrementTick+0x1c8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031bc:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <xTaskIncrementTick+0x1c8>)
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d120      	bne.n	800320a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <xTaskIncrementTick+0x1cc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <xTaskIncrementTick+0x48>
        __asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	607b      	str	r3, [r7, #4]
    }
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <xTaskIncrementTick+0x46>
 80031e8:	4b60      	ldr	r3, [pc, #384]	; (800336c <xTaskIncrementTick+0x1cc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	4b60      	ldr	r3, [pc, #384]	; (8003370 <xTaskIncrementTick+0x1d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5e      	ldr	r2, [pc, #376]	; (800336c <xTaskIncrementTick+0x1cc>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <xTaskIncrementTick+0x1d0>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <xTaskIncrementTick+0x1d4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a5c      	ldr	r2, [pc, #368]	; (8003374 <xTaskIncrementTick+0x1d4>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	f000 fb73 	bl	80038f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <xTaskIncrementTick+0x1d8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	429a      	cmp	r2, r3
 8003212:	f0c0 80a1 	bcc.w	8003358 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003216:	4b55      	ldr	r3, [pc, #340]	; (800336c <xTaskIncrementTick+0x1cc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003220:	4b55      	ldr	r3, [pc, #340]	; (8003378 <xTaskIncrementTick+0x1d8>)
 8003222:	f04f 32ff 	mov.w	r2, #4294967295
 8003226:	601a      	str	r2, [r3, #0]
                    break;
 8003228:	e096      	b.n	8003358 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322a:	4b50      	ldr	r3, [pc, #320]	; (800336c <xTaskIncrementTick+0x1cc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	429a      	cmp	r2, r3
 8003240:	d203      	bcs.n	800324a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003242:	4a4d      	ldr	r2, [pc, #308]	; (8003378 <xTaskIncrementTick+0x1d8>)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003248:	e086      	b.n	8003358 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	68d2      	ldr	r2, [r2, #12]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	6892      	ldr	r2, [r2, #8]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	3304      	adds	r3, #4
 800326c:	429a      	cmp	r2, r3
 800326e:	d103      	bne.n	8003278 <xTaskIncrementTick+0xd8>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2200      	movs	r2, #0
 800327c:	615a      	str	r2, [r3, #20]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01e      	beq.n	80032ce <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	6a12      	ldr	r2, [r2, #32]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	69d2      	ldr	r2, [r2, #28]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3318      	adds	r3, #24
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d103      	bne.n	80032be <xTaskIncrementTick+0x11e>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	2201      	movs	r2, #1
 80032d4:	409a      	lsls	r2, r3
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <xTaskIncrementTick+0x1dc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	4a27      	ldr	r2, [pc, #156]	; (800337c <xTaskIncrementTick+0x1dc>)
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4926      	ldr	r1, [pc, #152]	; (8003380 <xTaskIncrementTick+0x1e0>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	3204      	adds	r2, #4
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1d1a      	adds	r2, r3, #4
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4a17      	ldr	r2, [pc, #92]	; (8003380 <xTaskIncrementTick+0x1e0>)
 8003324:	441a      	add	r2, r3
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	615a      	str	r2, [r3, #20]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332e:	4914      	ldr	r1, [pc, #80]	; (8003380 <xTaskIncrementTick+0x1e0>)
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <xTaskIncrementTick+0x1e0>)
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4403      	add	r3, r0
 800334a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334c:	e763      	b.n	8003216 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <xTaskIncrementTick+0x1e4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <xTaskIncrementTick+0x1e4>)
 8003356:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800335a:	4618      	mov	r0, r3
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000200 	.word	0x20000200
 8003368:	200001dc 	.word	0x200001dc
 800336c:	20000190 	.word	0x20000190
 8003370:	20000194 	.word	0x20000194
 8003374:	200001f0 	.word	0x200001f0
 8003378:	200001f8 	.word	0x200001f8
 800337c:	200001e0 	.word	0x200001e0
 8003380:	20000104 	.word	0x20000104
 8003384:	200001e8 	.word	0x200001e8

08003388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <vTaskSwitchContext+0xa4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003396:	4b26      	ldr	r3, [pc, #152]	; (8003430 <vTaskSwitchContext+0xa8>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800339c:	e03f      	b.n	800341e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <vTaskSwitchContext+0xa8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <vTaskSwitchContext+0xac>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033b2:	7afb      	ldrb	r3, [r7, #11]
 80033b4:	f1c3 031f 	rsb	r3, r3, #31
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	491f      	ldr	r1, [pc, #124]	; (8003438 <vTaskSwitchContext+0xb0>)
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
    }
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <vTaskSwitchContext+0x5a>
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a12      	ldr	r2, [pc, #72]	; (8003438 <vTaskSwitchContext+0xb0>)
 80033f0:	4413      	add	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	3308      	adds	r3, #8
 8003406:	429a      	cmp	r2, r3
 8003408:	d104      	bne.n	8003414 <vTaskSwitchContext+0x8c>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <vTaskSwitchContext+0xb4>)
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000200 	.word	0x20000200
 8003430:	200001ec 	.word	0x200001ec
 8003434:	200001e0 	.word	0x200001e0
 8003438:	20000104 	.word	0x20000104
 800343c:	20000100 	.word	0x20000100

08003440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
    }
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <vTaskPlaceOnEventList+0x44>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3318      	adds	r3, #24
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff f8a1 	bl	80025b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003474:	2101      	movs	r1, #1
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	f000 fa74 	bl	8003964 <prvAddCurrentTaskToDelayedList>
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000100 	.word	0x20000100

08003488 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	613b      	str	r3, [r7, #16]
    }
 80034ac:	bf00      	nop
 80034ae:	e7fe      	b.n	80034ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	61da      	str	r2, [r3, #28]
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	621a      	str	r2, [r3, #32]
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	3218      	adds	r2, #24
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f103 0218 	add.w	r2, r3, #24
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f000 fa2f 	bl	8003964 <prvAddCurrentTaskToDelayedList>
    }
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000100 	.word	0x20000100

08003514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003514:	b480      	push	{r7}
 8003516:	b08b      	sub	sp, #44	; 0x2c
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	60fb      	str	r3, [r7, #12]
    }
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	6a3a      	ldr	r2, [r7, #32]
 800354c:	6a12      	ldr	r2, [r2, #32]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	69d2      	ldr	r2, [r2, #28]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	3318      	adds	r3, #24
 8003562:	429a      	cmp	r2, r3
 8003564:	d103      	bne.n	800356e <xTaskRemoveFromEventList+0x5a>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	2200      	movs	r2, #0
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	1e5a      	subs	r2, r3, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <xTaskRemoveFromEventList+0x194>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d15e      	bne.n	8003644 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	68d2      	ldr	r2, [r2, #12]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	6a3a      	ldr	r2, [r7, #32]
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	3304      	adds	r3, #4
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d103      	bne.n	80035b4 <xTaskRemoveFromEventList+0xa0>
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2200      	movs	r2, #0
 80035b8:	615a      	str	r2, [r3, #20]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <xTaskRemoveFromEventList+0x198>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	4a36      	ldr	r2, [pc, #216]	; (80036ac <xTaskRemoveFromEventList+0x198>)
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	4935      	ldr	r1, [pc, #212]	; (80036b0 <xTaskRemoveFromEventList+0x19c>)
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	3204      	adds	r2, #4
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <xTaskRemoveFromEventList+0x19c>)
 800361a:	441a      	add	r2, r3
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	4922      	ldr	r1, [pc, #136]	; (80036b0 <xTaskRemoveFromEventList+0x19c>)
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1c59      	adds	r1, r3, #1
 8003634:	481e      	ldr	r0, [pc, #120]	; (80036b0 <xTaskRemoveFromEventList+0x19c>)
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4403      	add	r3, r0
 8003640:	6019      	str	r1, [r3, #0]
 8003642:	e01b      	b.n	800367c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <xTaskRemoveFromEventList+0x1a0>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	61da      	str	r2, [r3, #28]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	621a      	str	r2, [r3, #32]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	3218      	adds	r2, #24
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f103 0218 	add.w	r2, r3, #24
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <xTaskRemoveFromEventList+0x1a0>)
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <xTaskRemoveFromEventList+0x1a0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <xTaskRemoveFromEventList+0x1a0>)
 800367a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <xTaskRemoveFromEventList+0x1a4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	429a      	cmp	r2, r3
 8003688:	d905      	bls.n	8003696 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <xTaskRemoveFromEventList+0x1a8>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e001      	b.n	800369a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800369c:	4618      	mov	r0, r3
 800369e:	372c      	adds	r7, #44	; 0x2c
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000200 	.word	0x20000200
 80036ac:	200001e0 	.word	0x200001e0
 80036b0:	20000104 	.word	0x20000104
 80036b4:	20000198 	.word	0x20000198
 80036b8:	20000100 	.word	0x20000100
 80036bc:	200001ec 	.word	0x200001ec

080036c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <vTaskInternalSetTimeOutState+0x24>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <vTaskInternalSetTimeOutState+0x28>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	200001f0 	.word	0x200001f0
 80036e8:	200001dc 	.word	0x200001dc

080036ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	613b      	str	r3, [r7, #16]
    }
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	60fb      	str	r3, [r7, #12]
    }
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800372e:	f000 fd4b 	bl	80041c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <xTaskCheckForTimeOut+0xc4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d102      	bne.n	8003752 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e026      	b.n	80037a0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <xTaskCheckForTimeOut+0xc8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d00a      	beq.n	8003774 <xTaskCheckForTimeOut+0x88>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d305      	bcc.n	8003774 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e015      	b.n	80037a0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20b      	bcs.n	8003796 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff98 	bl	80036c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e004      	b.n	80037a0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037a0:	f000 fd42 	bl	8004228 <vPortExitCritical>

    return xReturn;
 80037a4:	69fb      	ldr	r3, [r7, #28]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200001dc 	.word	0x200001dc
 80037b4:	200001f0 	.word	0x200001f0

080037b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <vTaskMissedYield+0x14>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	200001ec 	.word	0x200001ec

080037d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037d8:	f000 f84c 	bl	8003874 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <prvIdleTask+0x20>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037ec:	e7f4      	b.n	80037d8 <prvIdleTask+0x8>
 80037ee:	bf00      	nop
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	e00c      	b.n	800381a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <prvInitialiseTaskLists+0x60>)
 800380c:	4413      	add	r3, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fea4 	bl	800255c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d9ef      	bls.n	8003800 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <prvInitialiseTaskLists+0x64>)
 8003822:	f7fe fe9b 	bl	800255c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003826:	480d      	ldr	r0, [pc, #52]	; (800385c <prvInitialiseTaskLists+0x68>)
 8003828:	f7fe fe98 	bl	800255c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <prvInitialiseTaskLists+0x6c>)
 800382e:	f7fe fe95 	bl	800255c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003832:	480c      	ldr	r0, [pc, #48]	; (8003864 <prvInitialiseTaskLists+0x70>)
 8003834:	f7fe fe92 	bl	800255c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003838:	480b      	ldr	r0, [pc, #44]	; (8003868 <prvInitialiseTaskLists+0x74>)
 800383a:	f7fe fe8f 	bl	800255c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <prvInitialiseTaskLists+0x78>)
 8003840:	4a05      	ldr	r2, [pc, #20]	; (8003858 <prvInitialiseTaskLists+0x64>)
 8003842:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <prvInitialiseTaskLists+0x7c>)
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <prvInitialiseTaskLists+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000104 	.word	0x20000104
 8003858:	20000168 	.word	0x20000168
 800385c:	2000017c 	.word	0x2000017c
 8003860:	20000198 	.word	0x20000198
 8003864:	200001ac 	.word	0x200001ac
 8003868:	200001c4 	.word	0x200001c4
 800386c:	20000190 	.word	0x20000190
 8003870:	20000194 	.word	0x20000194

08003874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387a:	e019      	b.n	80038b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800387c:	f000 fca4 	bl	80041c8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003880:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <prvCheckTasksWaitingTermination+0x50>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fecb 	bl	8002628 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 800389a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <prvCheckTasksWaitingTermination+0x58>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <prvCheckTasksWaitingTermination+0x58>)
 80038a4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80038a6:	f000 fcbf 	bl	8004228 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f810 	bl	80038d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <prvCheckTasksWaitingTermination+0x58>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e1      	bne.n	800387c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200001ac 	.word	0x200001ac
 80038c8:	200001d8 	.word	0x200001d8
 80038cc:	200001c0 	.word	0x200001c0

080038d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fe0f 	bl	8004500 <vPortFree>
            vPortFree( pxTCB );
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fe0c 	bl	8004500 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <prvResetNextTaskUnblockTime+0x30>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d104      	bne.n	8003908 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <prvResetNextTaskUnblockTime+0x34>)
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003906:	e005      	b.n	8003914 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <prvResetNextTaskUnblockTime+0x30>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <prvResetNextTaskUnblockTime+0x34>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000190 	.word	0x20000190
 8003924:	200001f8 	.word	0x200001f8

08003928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <xTaskGetSchedulerState+0x34>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003936:	2301      	movs	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e008      	b.n	800394e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800393c:	4b08      	ldr	r3, [pc, #32]	; (8003960 <xTaskGetSchedulerState+0x38>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003944:	2302      	movs	r3, #2
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	e001      	b.n	800394e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800394e:	687b      	ldr	r3, [r7, #4]
    }
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	200001e4 	.word	0x200001e4
 8003960:	20000200 	.word	0x20000200

08003964 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800396e:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fe54 	bl	8002628 <uxListRemove>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2201      	movs	r2, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43da      	mvns	r2, r3
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4013      	ands	r3, r2
 800399a:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xec>)
 800399c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d124      	bne.n	80039f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d021      	beq.n	80039f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ac:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xf0>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	6892      	ldr	r2, [r2, #8]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	3204      	adds	r2, #4
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1d1a      	adds	r2, r3, #4
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xf0>)
 80039e0:	615a      	str	r2, [r3, #20]
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xf0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xf0>)
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039ee:	e026      	b.n	8003a3e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d209      	bcs.n	8003a1c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7fe fdce 	bl	80025b6 <vListInsert>
}
 8003a1a:	e010      	b.n	8003a3e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7fe fdc4 	bl	80025b6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d202      	bcs.n	8003a3e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200001dc 	.word	0x200001dc
 8003a4c:	20000100 	.word	0x20000100
 8003a50:	200001e0 	.word	0x200001e0
 8003a54:	200001c4 	.word	0x200001c4
 8003a58:	20000194 	.word	0x20000194
 8003a5c:	20000190 	.word	0x20000190
 8003a60:	200001f8 	.word	0x200001f8

08003a64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a6e:	f000 fa47 	bl	8003f00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <xTimerCreateTimerTask+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <xTimerCreateTimerTask+0x58>)
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a88:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <xTimerCreateTimerTask+0x5c>)
 8003a8a:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <xTimerCreateTimerTask+0x60>)
 8003a8c:	f7ff f8ce 	bl	8002c2c <xTaskCreate>
 8003a90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	603b      	str	r3, [r7, #0]
    }
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003aae:	687b      	ldr	r3, [r7, #4]
    }
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000234 	.word	0x20000234
 8003abc:	20000238 	.word	0x20000238
 8003ac0:	080047f8 	.word	0x080047f8
 8003ac4:	08003b6d 	.word	0x08003b6d

08003ac8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ad4:	e008      	b.n	8003ae8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	18d1      	adds	r1, r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f8dd 	bl	8003cb4 <prvInsertTimerInActiveList>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ea      	bne.n	8003ad6 <prvReloadTimer+0xe>
        }
    }
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <prvProcessExpiredTimer+0x5c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fd7f 	bl	8002628 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff ffc3 	bl	8003ac8 <prvReloadTimer>
 8003b42:	e008      	b.n	8003b56 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	4798      	blx	r3
    }
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	2000022c 	.word	0x2000022c

08003b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f857 	bl	8003c2c <prvGetNextExpireTime>
 8003b7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4619      	mov	r1, r3
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f803 	bl	8003b90 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b8a:	f000 f8d5 	bl	8003d38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b8e:	e7f1      	b.n	8003b74 <prvTimerTask+0x8>

08003b90 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b9a:	f7ff f9f5 	bl	8002f88 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f866 	bl	8003c74 <prvSampleTimeNow>
 8003ba8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d130      	bne.n	8003c12 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <prvProcessTimerOrBlockTask+0x3c>
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d806      	bhi.n	8003bcc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bbe:	f7ff f9f1 	bl	8002fa4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ffa1 	bl	8003b0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bca:	e024      	b.n	8003c16 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <prvProcessTimerOrBlockTask+0x90>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <prvProcessTimerOrBlockTask+0x50>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <prvProcessTimerOrBlockTask+0x52>
 8003be0:	2300      	movs	r3, #0
 8003be2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <prvProcessTimerOrBlockTask+0x94>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7fe ffe7 	bl	8002bc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bf6:	f7ff f9d5 	bl	8002fa4 <xTaskResumeAll>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <prvProcessTimerOrBlockTask+0x98>)
 8003c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
    }
 8003c10:	e001      	b.n	8003c16 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c12:	f7ff f9c7 	bl	8002fa4 <xTaskResumeAll>
    }
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000230 	.word	0x20000230
 8003c24:	20000234 	.word	0x20000234
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <prvGetNextExpireTime+0x44>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <prvGetNextExpireTime+0x16>
 8003c3e:	2201      	movs	r2, #1
 8003c40:	e000      	b.n	8003c44 <prvGetNextExpireTime+0x18>
 8003c42:	2200      	movs	r2, #0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <prvGetNextExpireTime+0x44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e001      	b.n	8003c60 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c60:	68fb      	ldr	r3, [r7, #12]
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000022c 	.word	0x2000022c

08003c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c7c:	f7ff fa80 	bl	8003180 <xTaskGetTickCount>
 8003c80:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <prvSampleTimeNow+0x3c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d205      	bcs.n	8003c98 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c8c:	f000 f912 	bl	8003eb4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e002      	b.n	8003c9e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <prvSampleTimeNow+0x3c>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000023c 	.word	0x2000023c

08003cb4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d812      	bhi.n	8003d00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e01b      	b.n	8003d26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <prvInsertTimerInActiveList+0x7c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe fc5c 	bl	80025b6 <vListInsert>
 8003cfe:	e012      	b.n	8003d26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d206      	bcs.n	8003d16 <prvInsertTimerInActiveList+0x62>
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e007      	b.n	8003d26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <prvInsertTimerInActiveList+0x80>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7fe fc48 	bl	80025b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d26:	697b      	ldr	r3, [r7, #20]
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000230 	.word	0x20000230
 8003d34:	2000022c 	.word	0x2000022c

08003d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d3e:	e0a6      	b.n	8003e8e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f2c0 80a2 	blt.w	8003e8c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fc65 	bl	8002628 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff87 	bl	8003c74 <prvSampleTimeNow>
 8003d66:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	f200 808e 	bhi.w	8003e8e <prvProcessReceivedCommands+0x156>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <prvProcessReceivedCommands+0x40>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e19 	.word	0x08003e19
 8003d88:	08003e63 	.word	0x08003e63
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003e05 	.word	0x08003e05
 8003d98:	08003e19 	.word	0x08003e19
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	18d1      	adds	r1, r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	69f8      	ldr	r0, [r7, #28]
 8003dbc:	f7ff ff7a 	bl	8003cb4 <prvInsertTimerInActiveList>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4619      	mov	r1, r3
 8003de0:	69f8      	ldr	r0, [r7, #28]
 8003de2:	f7ff fe71 	bl	8003ac8 <prvReloadTimer>
 8003de6:	e008      	b.n	8003dfa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	69f8      	ldr	r0, [r7, #28]
 8003e00:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e02:	e044      	b.n	8003e8e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e16:	e03a      	b.n	8003e8e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	617b      	str	r3, [r7, #20]
    }
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	18d1      	adds	r1, r2, r3
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	69f8      	ldr	r0, [r7, #28]
 8003e5c:	f7ff ff2a 	bl	8003cb4 <prvInsertTimerInActiveList>
                        break;
 8003e60:	e015      	b.n	8003e8e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d103      	bne.n	8003e78 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003e70:	69f8      	ldr	r0, [r7, #28]
 8003e72:	f000 fb45 	bl	8004500 <vPortFree>
 8003e76:	e00a      	b.n	8003e8e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e8a:	e000      	b.n	8003e8e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003e8c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <prvProcessReceivedCommands+0x178>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f107 0108 	add.w	r1, r7, #8
 8003e96:	2200      	movs	r2, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fce3 	bl	8002864 <xQueueReceive>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f af4d 	bne.w	8003d40 <prvProcessReceivedCommands+0x8>
        }
    }
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000234 	.word	0x20000234

08003eb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eba:	e009      	b.n	8003ed0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <prvSwitchTimerLists+0x44>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	f7ff fe1e 	bl	8003b0c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <prvSwitchTimerLists+0x44>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <prvSwitchTimerLists+0x44>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <prvSwitchTimerLists+0x48>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <prvSwitchTimerLists+0x44>)
 8003ee6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <prvSwitchTimerLists+0x48>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
    }
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000022c 	.word	0x2000022c
 8003efc:	20000230 	.word	0x20000230

08003f00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f04:	f000 f960 	bl	80041c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <prvCheckForValidListAndQueue+0x54>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d11d      	bne.n	8003f4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f10:	4811      	ldr	r0, [pc, #68]	; (8003f58 <prvCheckForValidListAndQueue+0x58>)
 8003f12:	f7fe fb23 	bl	800255c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f16:	4811      	ldr	r0, [pc, #68]	; (8003f5c <prvCheckForValidListAndQueue+0x5c>)
 8003f18:	f7fe fb20 	bl	800255c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <prvCheckForValidListAndQueue+0x60>)
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <prvCheckForValidListAndQueue+0x58>)
 8003f20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <prvCheckForValidListAndQueue+0x64>)
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <prvCheckForValidListAndQueue+0x5c>)
 8003f26:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f28:	2200      	movs	r2, #0
 8003f2a:	210c      	movs	r1, #12
 8003f2c:	200a      	movs	r0, #10
 8003f2e:	f7fe fc27 	bl	8002780 <xQueueGenericCreate>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <prvCheckForValidListAndQueue+0x54>)
 8003f36:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <prvCheckForValidListAndQueue+0x54>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <prvCheckForValidListAndQueue+0x54>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4908      	ldr	r1, [pc, #32]	; (8003f68 <prvCheckForValidListAndQueue+0x68>)
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fdee 	bl	8002b28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f4c:	f000 f96c 	bl	8004228 <vPortExitCritical>
    }
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000234 	.word	0x20000234
 8003f58:	20000204 	.word	0x20000204
 8003f5c:	20000218 	.word	0x20000218
 8003f60:	2000022c 	.word	0x2000022c
 8003f64:	20000230 	.word	0x20000230
 8003f68:	08004800 	.word	0x08004800

08003f6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b04      	subs	r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3b04      	subs	r3, #4
 8003f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003f9c:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <pxPortInitialiseStack+0x64>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b14      	subs	r3, #20
 8003fa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f06f 0202 	mvn.w	r2, #2
 8003fba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3b20      	subs	r3, #32
 8003fc0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	08003fd5 	.word	0x08003fd5

08003fd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <prvTaskExitError+0x54>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d00a      	beq.n	8003ffe <prvTaskExitError+0x2a>
        __asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	60fb      	str	r3, [r7, #12]
    }
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <prvTaskExitError+0x28>
        __asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	60bb      	str	r3, [r7, #8]
    }
 8004010:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004012:	bf00      	nop
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0fc      	beq.n	8004014 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20000010 	.word	0x20000010
 800402c:	00000000 	.word	0x00000000

08004030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <pxCurrentTCBConst2>)
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	6808      	ldr	r0, [r1, #0]
 8004036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403a:	f380 8809 	msr	PSP, r0
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8811 	msr	BASEPRI, r0
 800404a:	4770      	bx	lr
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst2>:
 8004050:	20000100 	.word	0x20000100
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004058:	4808      	ldr	r0, [pc, #32]	; (800407c <prvPortStartFirstTask+0x24>)
 800405a:	6800      	ldr	r0, [r0, #0]
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f380 8808 	msr	MSP, r0
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8814 	msr	CONTROL, r0
 800406a:	b662      	cpsie	i
 800406c:	b661      	cpsie	f
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	df00      	svc	0
 8004078:	bf00      	nop
 800407a:	0000      	.short	0x0000
 800407c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop

08004084 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800408a:	4b46      	ldr	r3, [pc, #280]	; (80041a4 <xPortStartScheduler+0x120>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a46      	ldr	r2, [pc, #280]	; (80041a8 <xPortStartScheduler+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10a      	bne.n	80040aa <xPortStartScheduler+0x26>
        __asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	613b      	str	r3, [r7, #16]
    }
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040aa:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <xPortStartScheduler+0x120>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a3f      	ldr	r2, [pc, #252]	; (80041ac <xPortStartScheduler+0x128>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10a      	bne.n	80040ca <xPortStartScheduler+0x46>
        __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
    }
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <xPortStartScheduler+0x12c>)
 80040cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <xPortStartScheduler+0x130>)
 80040f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040f2:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <xPortStartScheduler+0x134>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040f8:	e009      	b.n	800410e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80040fa:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <xPortStartScheduler+0x134>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3b01      	subs	r3, #1
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <xPortStartScheduler+0x134>)
 8004102:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b80      	cmp	r3, #128	; 0x80
 8004118:	d0ef      	beq.n	80040fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <xPortStartScheduler+0x134>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	d00a      	beq.n	800413c <xPortStartScheduler+0xb8>
        __asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60bb      	str	r3, [r7, #8]
    }
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <xPortStartScheduler+0x134>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <xPortStartScheduler+0x134>)
 8004144:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <xPortStartScheduler+0x134>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800414e:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <xPortStartScheduler+0x134>)
 8004150:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <xPortStartScheduler+0x138>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a17      	ldr	r2, [pc, #92]	; (80041bc <xPortStartScheduler+0x138>)
 8004160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004164:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <xPortStartScheduler+0x138>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <xPortStartScheduler+0x138>)
 800416c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004170:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004172:	f000 f8db 	bl	800432c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <xPortStartScheduler+0x13c>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800417c:	f000 f8fa 	bl	8004374 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <xPortStartScheduler+0x140>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <xPortStartScheduler+0x140>)
 8004186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800418a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800418c:	f7ff ff64 	bl	8004058 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004190:	f7ff f8fa 	bl	8003388 <vTaskSwitchContext>
    prvTaskExitError();
 8004194:	f7ff ff1e 	bl	8003fd4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	e000ed00 	.word	0xe000ed00
 80041a8:	410fc271 	.word	0x410fc271
 80041ac:	410fc270 	.word	0x410fc270
 80041b0:	e000e400 	.word	0xe000e400
 80041b4:	20000240 	.word	0x20000240
 80041b8:	20000244 	.word	0x20000244
 80041bc:	e000ed20 	.word	0xe000ed20
 80041c0:	20000010 	.word	0x20000010
 80041c4:	e000ef34 	.word	0xe000ef34

080041c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
        __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
    }
 80041e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <vPortEnterCritical+0x58>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3301      	adds	r3, #1
 80041e8:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <vPortEnterCritical+0x58>)
 80041ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <vPortEnterCritical+0x58>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10f      	bne.n	8004214 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <vPortEnterCritical+0x5c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <vPortEnterCritical+0x4c>
        __asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
    }
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <vPortEnterCritical+0x4a>
    }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	20000010 	.word	0x20000010
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800422e:	4b12      	ldr	r3, [pc, #72]	; (8004278 <vPortExitCritical+0x50>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <vPortExitCritical+0x24>
        __asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	607b      	str	r3, [r7, #4]
    }
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <vPortExitCritical+0x50>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3b01      	subs	r3, #1
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <vPortExitCritical+0x50>)
 8004254:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <vPortExitCritical+0x50>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <vPortExitCritical+0x42>
 800425e:	2300      	movs	r3, #0
 8004260:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004268:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000010 	.word	0x20000010
 800427c:	00000000 	.word	0x00000000

08004280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004280:	f3ef 8009 	mrs	r0, PSP
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <pxCurrentTCBConst>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f01e 0f10 	tst.w	lr, #16
 8004290:	bf08      	it	eq
 8004292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	6010      	str	r0, [r2, #0]
 800429c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042a4:	f380 8811 	msr	BASEPRI, r0
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f7ff f86a 	bl	8003388 <vTaskSwitchContext>
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f380 8811 	msr	BASEPRI, r0
 80042bc:	bc09      	pop	{r0, r3}
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c6:	f01e 0f10 	tst.w	lr, #16
 80042ca:	bf08      	it	eq
 80042cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042d0:	f380 8809 	msr	PSP, r0
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst>:
 80042e0:	20000100 	.word	0x20000100
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
        __asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
    }
 8004300:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004302:	f7fe ff4d 	bl	80031a0 <xTaskIncrementTick>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <SysTick_Handler+0x40>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
    }
 800431e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <vPortSetupTimerInterrupt+0x34>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <vPortSetupTimerInterrupt+0x38>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <vPortSetupTimerInterrupt+0x3c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <vPortSetupTimerInterrupt+0x40>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <vPortSetupTimerInterrupt+0x44>)
 800434a:	3b01      	subs	r3, #1
 800434c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <vPortSetupTimerInterrupt+0x34>)
 8004350:	2207      	movs	r2, #7
 8004352:	601a      	str	r2, [r3, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000e010 	.word	0xe000e010
 8004364:	e000e018 	.word	0xe000e018
 8004368:	20000000 	.word	0x20000000
 800436c:	10624dd3 	.word	0x10624dd3
 8004370:	e000e014 	.word	0xe000e014

08004374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004384 <vPortEnableVFP+0x10>
 8004378:	6801      	ldr	r1, [r0, #0]
 800437a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800437e:	6001      	str	r1, [r0, #0]
 8004380:	4770      	bx	lr
 8004382:	0000      	.short	0x0000
 8004384:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop

0800438c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004398:	f7fe fdf6 	bl	8002f88 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800439c:	4b53      	ldr	r3, [pc, #332]	; (80044ec <pvPortMalloc+0x160>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80043a4:	f000 f908 	bl	80045b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80043ae:	2208      	movs	r2, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	3308      	adds	r3, #8
 80043ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	43db      	mvns	r3, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d804      	bhi.n	80043d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	4413      	add	r3, r2
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	e001      	b.n	80043d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	db70      	blt.n	80044bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d06d      	beq.n	80044bc <pvPortMalloc+0x130>
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <pvPortMalloc+0x164>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d868      	bhi.n	80044bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043ea:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <pvPortMalloc+0x168>)
 80043ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <pvPortMalloc+0x168>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043f4:	e004      	b.n	8004400 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d903      	bls.n	8004412 <pvPortMalloc+0x86>
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f1      	bne.n	80043f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <pvPortMalloc+0x160>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	429a      	cmp	r2, r3
 800441a:	d04f      	beq.n	80044bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	4413      	add	r3, r2
 8004424:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	2308      	movs	r3, #8
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	429a      	cmp	r2, r3
 800443c:	d91f      	bls.n	800447e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <pvPortMalloc+0xda>
        __asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	613b      	str	r3, [r7, #16]
    }
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	f000 f8f9 	bl	8004670 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <pvPortMalloc+0x164>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <pvPortMalloc+0x164>)
 800448a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <pvPortMalloc+0x164>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <pvPortMalloc+0x16c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d203      	bcs.n	80044a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <pvPortMalloc+0x164>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <pvPortMalloc+0x16c>)
 800449e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <pvPortMalloc+0x170>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a10      	ldr	r2, [pc, #64]	; (80044fc <pvPortMalloc+0x170>)
 80044ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044bc:	f7fe fd72 	bl	8002fa4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <pvPortMalloc+0x154>
        __asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60fb      	str	r3, [r7, #12]
    }
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <pvPortMalloc+0x152>
    return pvReturn;
 80044e0:	69fb      	ldr	r3, [r7, #28]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3728      	adds	r7, #40	; 0x28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20012e50 	.word	0x20012e50
 80044f0:	20012e54 	.word	0x20012e54
 80044f4:	20012e48 	.word	0x20012e48
 80044f8:	20012e58 	.word	0x20012e58
 80044fc:	20012e5c 	.word	0x20012e5c

08004500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d049      	beq.n	80045a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004512:	2308      	movs	r3, #8
 8004514:	425b      	negs	r3, r3
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db0a      	blt.n	800453e <vPortFree+0x3e>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <vPortFree+0x5c>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
    }
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0fdb      	lsrs	r3, r3, #31
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d118      	bne.n	80045a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004580:	f7fe fd02 	bl	8002f88 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <vPortFree+0xb0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4413      	add	r3, r2
 800458e:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <vPortFree+0xb0>)
 8004590:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004592:	6938      	ldr	r0, [r7, #16]
 8004594:	f000 f86c 	bl	8004670 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <vPortFree+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <vPortFree+0xb4>)
 80045a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80045a2:	f7fe fcff 	bl	8002fa4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20012e54 	.word	0x20012e54
 80045b4:	20012e60 	.word	0x20012e60

080045b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80045c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <prvHeapInit+0xa4>)
 80045c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3307      	adds	r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <prvHeapInit+0xa4>)
 80045e8:	4413      	add	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045f0:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <prvHeapInit+0xa8>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <prvHeapInit+0xa8>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004604:	2208      	movs	r2, #8
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <prvHeapInit+0xac>)
 8004618:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <prvHeapInit+0xac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <prvHeapInit+0xac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvHeapInit+0xac>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a08      	ldr	r2, [pc, #32]	; (8004668 <prvHeapInit+0xb0>)
 8004646:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <prvHeapInit+0xb4>)
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000248 	.word	0x20000248
 8004660:	20012e48 	.word	0x20012e48
 8004664:	20012e50 	.word	0x20012e50
 8004668:	20012e58 	.word	0x20012e58
 800466c:	20012e54 	.word	0x20012e54

08004670 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <prvInsertBlockIntoFreeList+0xac>)
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e002      	b.n	8004684 <prvInsertBlockIntoFreeList+0x14>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d8f7      	bhi.n	800467e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4413      	add	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d108      	bne.n	80046b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d118      	bne.n	80046f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <prvInsertBlockIntoFreeList+0xb0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d00d      	beq.n	80046ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e008      	b.n	8004700 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <prvInsertBlockIntoFreeList+0xb0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e003      	b.n	8004700 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d002      	beq.n	800470e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20012e48 	.word	0x20012e48
 8004720:	20012e50 	.word	0x20012e50

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4d0d      	ldr	r5, [pc, #52]	; (800475c <__libc_init_array+0x38>)
 8004728:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	2600      	movs	r6, #0
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	4d0b      	ldr	r5, [pc, #44]	; (8004764 <__libc_init_array+0x40>)
 8004736:	4c0c      	ldr	r4, [pc, #48]	; (8004768 <__libc_init_array+0x44>)
 8004738:	f000 f82e 	bl	8004798 <_init>
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	2600      	movs	r6, #0
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	08004828 	.word	0x08004828
 8004760:	08004828 	.word	0x08004828
 8004764:	08004828 	.word	0x08004828
 8004768:	0800482c 	.word	0x0800482c

0800476c <memcpy>:
 800476c:	440a      	add	r2, r1
 800476e:	4291      	cmp	r1, r2
 8004770:	f100 33ff 	add.w	r3, r0, #4294967295
 8004774:	d100      	bne.n	8004778 <memcpy+0xc>
 8004776:	4770      	bx	lr
 8004778:	b510      	push	{r4, lr}
 800477a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004782:	4291      	cmp	r1, r2
 8004784:	d1f9      	bne.n	800477a <memcpy+0xe>
 8004786:	bd10      	pop	{r4, pc}

08004788 <memset>:
 8004788:	4402      	add	r2, r0
 800478a:	4603      	mov	r3, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
